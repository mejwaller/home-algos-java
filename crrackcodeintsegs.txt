

Public boolean uniqueChar(String str) {
	Set<Character> chars = new HashSet<Character>();

	for(int i=0; i<str.length(); i++) {
		Character ch = str.charAt(i); //use autoboxing rather than constructor
		if(chars.contains(ch) return false;
		chars.add(ch);
	}

	return true;
}

public boolean isPerm(String str1, String str2) {
	if(str1.length() != str2.length()) return false;

	if(str1.equals(str2)) return true;

	//naive:

	Map<Character, Integer> str1chars = new HashMap<Character, Integer>();
	Map<Character, Integer> str2chars = new HashMap<Character, Integer>();
	for(int I = 0; I <str1.length; i++) {
		Character ch = str1.charAt(i);
		if(str1chars.contains(ch)) {			
			//Integer count = str1chars.get(ch);
			//count++;
			str1chars.put(ch, str1chars.get(ch)++);
		}
		ch = str2.charAt(i);
		if(str2chars.contains(ch)) {			
			//Integer count = str2chars.get(ch);
			//count++;
			str2chars.put(ch, str2chars.get(ch)++);
		}
	
	}

	if(str1chars.equals(str2chars)) {
		return true;
	}
}

public void spaceReplace(char[] str, int len) {

	//record the indices at which ther are spaces
	//ArrayList<Integer> spinds = new ArrayList<Integer>();

	//increment this by 2 as we insert '%20'
	int newlen = len;

	for(int I = 0; i<newlen; i++) {
		if(str[i] = ' ')  {
			//spinds.add(i);
			newlen+=2;
			//shunt the remainder of the string along by 2
			for(int j = newlen-1; j>i;j--) {
				str[j] = str[j-2];
			}
			str[i]='%';
			str[i+1]='2';
			str[i+2]='0';
			i+=2;
		}
           }

}

public String compressString(String in) {
	//we are given assumption that string only contains upper or lower case a-z
	//ignoring that assumption for now:

	if(in.length() <=1 )
	{
		return in;
	}

	StringBuffer temp = new StringBuffer();

	int curCount = 1;
	char curChar = in.charAt(0);

	//last char??
	//abde – I =3, curChar = d
	//append d,1
	for(int I =1; I < in.length(); i++) {
		if(in.charAt(i) == curChar) {
			curCount++;
		}
		else {
			temp.append(curChar);
			temp.append(curCount);
			curChar = in.charAt(i);
			curCount = 1;
		}
	}

	//end of string
	temp.append(curChar);
	temp.append(curCount);

	String retval = temp.toString();
	if(retval.length() >= in.length()){
		return in;
	}

	return retval;
}

1: 0,0 → 0,2
2: 0,1 → 1,2
3: 0,2 → 2,2

4: 1,0 → 0,1
5: 1,1 → 1,1
6: 1,2 → 2,1

7: 2,0 → 0,0
8: 2,1 → 1,0 
9: 2,2 → 2,0

1 2 3          7 4 1
4 5 6    ->    8 5 2
7 8 9          9 6 3

1  2  3  4      13  9 5 1
5  6  7  8  ->  14 10 6 2
9  10 11 12     15 11 7 3 
13 14 15 16     16 12 8 4

void rotImage(int[][] img, int n) {

	int layers = n/2;
	int temp;
	
	for(int layer = 0; layer < layers; layer++) {  
	   int first = layer;//starting index of layer
	   int last = n-1-layer;//end index of layer
	   
	   for(int i = first; i < last; i++) {//for each layer index
	       int offset = i -first;
	       
	       //store top row in temp
	       temp = img[first][i];
	       
	       //set top row to left column
	       img[first][i] = img[last-offset][first];
	       
	       //set left column to bottom row
	       img[last-offset][first] = img[last][last-offset];
	       
	       //set bottom row to right column
	       img[last][last-offset]=img[i][last];
	       
	       //set right column to top row (stored in temp)
	       img[i][last] = temp;
	    }
	 }	
}

//assume int matrix
void zeroRCs(int[][] m, int rows, int cols) {
    
    Set<Integer> orows = new HashSet<Integer>();
    Set<Integer> ocols = new HashSet<Integer>();
    
     for(int i=0; i< rows; i++) {
        for(int j =0; j<cols;j++) {
            if(m[i][j]==0) {
                orows.add(i);
		    ocols.add(j);
            }
        }
    }
    
    for(Integer row: orows) {
        for(int i = 0; i < cols; i++) {
            m[row][i]=0;
        }
    }




    for(Integer col: ocols) {
        for(int i=0; i < rows; i++) {
            m[i][col]=0; 
        }	          
    }
  }
  
  public boolean isRotation(String s1, String s2) {
    //S1 = "waterbottle"
    //S2 = "erbottlewat"
    //should return true 
    
    //use just *one* call to isSubstring

    //trivial case - s1 == s2:
    if(s1.equals(s2)) {
        return true;
    }
    
    //s2 will *always be a substring of s1 + s1 if s2 is a true rotation of s1...
    //waterbottlewaterbottle contains string erbottlewat...
    int len = s1.length();    
    if(s2.length() == len && len > 0) {
        String s1twice = s1+s1;
        return isSubstring(s1twice,s2);
    }
    
    return false;
} 
    
public boolean isSubstring(String s1, String s2) {
    StringBuffer sb2 = new StringBuffer(s2);
    
    if(s1.contains(new StringBuffer(s2))) {
        return true;
    }
    
    return false;
    
}
        
public void llRemoveDupes(SlinkedList ll) {
        
        Set<Integer> nodes = new HashSet<Integer>();
        
        SNode curnode = ll.head;
        
        if(ll.head==null) return;//empty list
        
        nodes.add(ll.head.data);
        
        while(curnode.next!=null) {
            if(nodes.contains(curnode.next.data)) {
                ll.delete(curnode.next.data);
            }
            else {
                nodes.add(curnode.next.data);
            }
            curnode = curnode.next
 }
 
public void deletNode(SNode node) {

//first solution - generate a new linked list (question does not say in place) 
public SlinkedList partition(SlinkedList ll, int val) {
    SlinkedList retlist = new SlinkedList();
    
    SNode curnode = ll.head;
    if(curnode==null) return null;
    
    while(curnode!=null) {
        if(curnode.data < val) {
            retlist.insert(curnode);
        }
        else {
            retlist.append(curnode);
    }
    
    return retlist;
    
 }
 
 public SlinkedList addV2(SLinkedList left, SLinkedList right) {
     int ileft, iright;
     
     //if both are null, return null, else if one is null just return the other
    if(left.head==null) {
        if(right.head!=null){
            return right;
        }
        else return null;
    }
    else if(right.head==null) {
        return left;
    }
    
    //build left number
    //123 stored as 1-2-3
    int ileft = left.head.data;
    
    SNode curnode = head.next;
    while(curnode!=null) {
        ileft*=10;
        ileft+=curnode.data;
        curnode = curnode.next;
    }
    
    //build right number
    int iright = right.head.data;
    curnode = right.head.next;
    while(curnode!=null) {
        iright*=10;
        iright+=curnode.data;
        curnode = curnode.next;
    }
    
    int iresult=ileft+iright;
    
    //no build up linkedlist
    SlinkedList retval = new SlinkedList();
    
    
    
    while(iresult/10 != 0 || iresult%10 !=0) {
    {
        retval.insert(iresult%10);
        iresult=iresult/10;
    }

    return retval;

}

    
 
 public SlinkedList add(SlinkedList left, SLinkedList right) {
    
    int ileft, iright;
    
    //build ileft
    int mult = 10;
    
    //if both are null, return null, else if one is null just return the other
    if(left.head==null) {
        if(right.head!=null){
            return right;
        }
        else return null;
    }
    else if(right.head==null) {
        return left;
    }
    
    //build left number
    ileft = left.head.data;
    
    SNode curnode = left.head.next;
    
    while(curnode!=null) {
        ileft += mult * curnode.data;
        mult*=10;
        curnode=curnode.next;
    }
    
    //build right number
    iright = right.head.data;
   
    curnode = right.head.next;
    while(curnode!=null){
       iright += mult * curnode.data;
       mult*=10;
       curnode=curnode.next;
    }   
    
    int iresult=ileft+iright;
    
    //no build up linkedlist
    SlinkedList retval = new SlinkedList();
    
    
    
    while(iresult/10 != 0 || iresult%10 !=0) {
    {
        retval.append(iresult%10);
        iresult=iresult/10;
    }
    
    return retval;
}


 public SNode getRepeated(SlinkedList ll) {
    Set<SNode> seen = new HashSet<SNode>();
    
    if(ll.head==null) return null;
    
    SNode curnode = ll.head;
    
    while(curnode!=null( {
        //return curnode if it's already in the ll (same node as previous)
        if seen.contains(curnode) {
            return curnode;
        }
        else {//add curnode to the set to kmark it as having been seen
            seen.add(curnode);
        }
    }
    
    //if we get here there is no circularity so return null
    return null;
}
    
           
          
    
    
    
    
        
        
            
        

    

        
    
 
 
			
			

			


			
				
			
			
		
		
		
		
  

